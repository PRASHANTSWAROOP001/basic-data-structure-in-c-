#include<iostream>
using namespace std;

class Node
{

public:
    int data;

    Node *next;
};

class Queue
{

public:

    Node *front;

    Node *rear;


    Queue()
    {

        front = rear = NULL;

    }

    void enq(int value);

    void display();

    void deq();

};

void Queue::enq(int value)
{

    Node *new_node = new Node();

    if(new_node == NULL)
    {
        cout<<"overflow"<<endl;
    }
    new_node->data = value;

    new_node->next = NULL;

    if(front == NULL)
    {
        front = rear = new_node;
    }
    else
    {
        rear->next = new_node;

        rear = new_node;
    }
}

void Queue::display()
{
    if(front == NULL)
    {
        cout<<"Queue is empty"<<endl;
    }
    Node *temp = front;

    cout<<"Data stored in Queue is."<<endl;

    while(temp != NULL)
    {
        cout<<" "<<temp->data;
        temp = temp->next;
    }

    cout<<endl;
}

void Queue:: deq()
{
    Node *temp = front;

    if(front == NULL)
    {
        cout<<"Underflow"<<endl;
    }
    else if(temp->next != NULL)
    {
        temp = temp->next;

        cout<<"Value dequeued is: "<<front->data<<endl;

        delete front;

        front = temp;
    }
    else
    {
        cout<<"Value dequeued is: "<<front->data<<endl;

        delete front;

        front = rear = NULL;
    }

}


int main()
{

    Queue q1;

    q1.enq(101);

    q1.enq(201);

    q1.enq(901);

    q1.enq(483396);

    q1.enq(258);

    q1.display();

    q1.deq();

    q1.deq();

    q1.deq();

    q1.display();

    return 0;

}
